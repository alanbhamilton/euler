// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
// By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
// find the sum of the even-valued terms.

package main

import (
	"fmt"
	"math"
	"time"

	"github.com/alanbhamilton/euler/util"
)

const limit int = 4e6

func sumEvenFib(limit int) int {
	defer util.Timetrack(time.Now(), "sumEvenFib")
	t1, t2 := 1, 1 // initialize the first two terms
	sumEven := 0
	for t2 <= limit {
		if math.Mod(float64(t2), 2) == 0 {
			sumEven += t2 // if the new term is even add it to the sum of even numbers
		}
		t1, t2 = t2, t1+t2
	}
	return sumEven
}

func main() {
	fmt.Println("result: ", sumEvenFib(limit))
}
